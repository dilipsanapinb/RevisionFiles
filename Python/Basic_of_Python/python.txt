# Python:
-- Python is a versatile and beginner-friendly programming language known for its simplicity and readability.
--" compressed code"
-- Python is an interpreted, object oriented, high level, programming language wiith dynamic semantics.
-- Python is indentation-sensitive, menaning the proper indentation is crucial. User four spaces(or a tab) to indent you code.
-- use "#" symbol for comments.


Python is a popular, high-level, general-purpose programming language known for its simplicity and readability.
-- It was created by Guido van Rossum and first released in 1991. 
-- "Python has gained immense popularity in various domains, including web development, data analysis, artificial intelligence, scientific computing, automation, and more. Here are some of its key features:"


* Features of the Python:

1. "Readable and Expressive Syntax":
2. "Cross-Platform": 
3. Easy to learn and implementation
4. Open source

3. "High-Level Language": 
Python is a high-level programming language, which "means it abstracts low-level details like memory management and provides built-in data structures and libraries that simplify programming tasks".

3. "Interpreted Language": 
-- Python is an interpreted language(Python read and compile the code line by line), 
-- meaning "you don't need to compile your code before executing it"." This makes development faster and more interactive."

4. "Large Standard Library": 
-- Python comes with a comprehensive standard library that provides modules and packages for a wide range of tasks, from working with files and data to network programming and web development.

5. "Dynamically Typed": 
Python is dynamically typed, meaning "you don't need to declare variable types. The interpreter infers the data type of a variable at runtime". This can lead to more concise code but requires careful attention to variable types.

6. "Multi-Paradigm": 
-- Python supports multiple programming paradigms, including procedural, object-oriented, and functional programming. This flexibility allows you to choose the approach that best suits your project.

7. "Community and Ecosystem": 

8. "Integration": 
-- Python can easily integrate with other languages like C, C++, and Java, allowing you to use existing libraries and legacy code.

9. "Third-Party Libraries": 
Python has a rich ecosystem of third-party libraries and frameworks, including Django, Flask, NumPy, pandas, TensorFlow, and more, which extend its capabilities for specific domains.


10. "Wide Range of Applications": 
Python is versatile and can be used for various applications, from web development and data analysis to scientific research, game development, and artificial intelligence.

11. GUI:
-- we can use for the desktop appications.

12. Examples:
    -Instagram
    -Facebook
    -Spotify
    -Uber
    -DropBox
    -VLC Player
    -Quara
    -Netflix
    -Torrent

Python's combination of simplicity and power has made it a go-to language for both beginners and experienced programmers, contributing to its widespread use and continued growth in various fields.

----------------------------------------------

# Difference between Python and JavaScript and why Python is so popular language?

Python and JavaScript are two different programming languages with distinct characteristics and use cases. Here are some key differences between them:

1. Syntax:

-- Python is known for its "clean and readable syntax", which uses "indentation (whitespace) to define code blocks". This makes Python code easy to understand and maintain.

-- JavaScript, on the other hand, has a C"-style syntax with curly braces" and "semicolons". While it's not as clean as Python, it's still relatively easy to read.


2. Typing:

-- "Python is dynamically typed, meaning variable types are determined at runtime", and you don't need to specify them explicitly.
-- JavaScript is also dynamically typed, but it's often considered "loosely typed because it performs automatic type conversions."

3. Use Cases:

-- Python is a general-purpose language with a wide range of applications, including "web development, data science, machine learning, scientific computing, and automation".

-- JavaScript is primarily used for web development and can run in web browsers to provide dynamic functionality and interactivity on websites.

4. Ecosystem:

-- Python has a rich ecosystem with a vast collection of libraries and frameworks, such as Django, Flask (for web development), NumPy, Pandas (for data analysis), and TensorFlow (for machine learning).

-- JavaScript's ecosystem is centered around web development and includes libraries and frameworks like React, Angular, and Vue.js for building user interfaces, as well as Node.js for server-side development.

5. Execution Environment:

Python code is typically executed on the server (using frameworks like Django or Flask) or locally on the client's machine.
JavaScript runs primarily in web browsers, but it can also be executed on the server-side using Node.js.


6. Popularity:

-- Python has gained immense popularity due to its "simplicity, readability, and versatility". 
-- It's often recommended as a first programming language and is widely used in academia, data science, and artificial intelligence.
JavaScript's popularity is driven by its role in web development. It's the de facto language for front-end and has gained importance in the back-end with Node.js.

7. Community and Support:

Both Python and JavaScript have large and active communities that contribute to open-source projects, answer questions on forums, and provide extensive documentation.

8. Learning Curve:

Python is often considered easier for beginners to learn and is a common choice for introductory programming courses.
JavaScript, while accessible for beginners, can become more complex as you delve into its asynchronous and event-driven nature.

9. Performance:

-- Python is not as performant as some lower-level languages, but it's often "fast enough" for most applications.
-- "Python's performance can be improved through optimization and the use of compiled extensions".

JavaScript is typically faster for browser-based tasks due to its close integration with web browsers, but it may not be as fast as lower-level languages for certain types of computing.

Python's popularity can be attributed to its ease of use, readability, versatility, and a broad range of libraries that cater to various domains, making it a go-to language for developers, data scientists, and researchers. Its adoption in artificial intelligence and machine learning has further accelerated its growth.

-----------------------------------------------
## Basic data types in Python:

1. Integers:
    -- whole numbers 
    -- eg. 5, 0, -10

2. Floating-Points Numbers:
    -- decimal numbers
    -- eg. 3.14, -0.1

3. String:
    -- "python"

4. Booleans:
    -- True, False.

5. NoneType (None):

Represents a lack of a value or absence of a value.
Example: empty_variable = None

6. Set:

-- Represents an unordered collection of unique elements. 
-- Sets do not allow duplicate values.
-- Sets are commonly used to eliminate duplicates from a list or check for membership (e.g., checking if an item is in a set).
my_set = set([1, 2, 2, 3]).
Example: unique_numbers = {1, 2, 3, 4, 5}

7. Complex (complex):

Represents complex numbers with both real and imaginary parts.
Example: z = 3 + 4j

8. Lists
9. Dictionaries
-- A dictionary is an unordered collection of data where each element is stored as a key-value pair.
-- Keys are unique and immutable (strings, numbers, or tuples), and they act as identifiers for values.
10. Tupple: 
--Tuples are ordered collections of items.
--Tuples are defined using parentheses: my_tuple = (1, 2, "apple").
--Tuples are useful when you want to create a collection of items that should not change (e.g., coordinates or database records).


------------------------------------------

# Operations on Data types:
* Arithmatic operators
1. division: /
2. Floor Division: //
    eg. 3//2=1


1. Addition:

    x=5
    y=6

    result=x+y

    print(result) # output 11

2. String operations

    greeting="Hello"
    name="Dilip"

    message = greeting + ", " + name

    print(message) # Output "Hello, Dilip"

* Logical operators:

1. and:  x>5 and x<10
2. or: x<5 or x<10
3. not: reverse the result, return False if the result is True
not(x<5 and x>5)


* Membership Operators: 

1. in:
-- returns True if a sequence with specified value is present in the object

        x in y 

        string="hello"
        print('e' in string)

        // ans is True

2. not in:

-- Returns True if a sequence with the specified value is not presentin the object.

        x not in y

* Identity Operators:
1. is 
-- Returns True if both variable are the same
-- similar to ==
    x is y 

    x=10
    y=10

    print(x is y) //True

2. is not:
-- Return True is both variables are not the same value.

    x is not y


--------------------------------

* Bitwise Operators:
1. & (and)
    x & y
    x=10
    bin(x) #Get a binary of the number
    y=8
    bin(y) #Get a binary of the number
    # 8

    print(bin(x+y)) #Get a binary of the number


2. | (or)

    x | y

3. ^ (XOR)

    a^b


1=True 0=False

    A   B   A&B     A|B     A^B 
    0   0   0       0       0
    0   1   0       1       1
    1   0   0       1       1
    1   1   1       1       0


------------------------------------------------

* input()

a=input("Enter the Value1:- ")
b=input("Enter the value2:- ")
# print(a+b) # concatination


* int()
# a=int(input("Enter the Value1:- "))
# b=int(input("Enter the value2:- "))
# print(a+b) # addition
# 1
# 2
# 3

* float()
a=float(input("Enter the Value1:- "))
b=float(input("Enter the value2:- "))
print(a+b) # addition
# 10
# 20
# 30.0

* eval()
a=eval(input("Enter the Value1:- "))
b=eval(input("Enter the value2:- "))
print(a+b) # addition
# 10
# 20.5
# 30.5
-----------------------------------------------

* How do you create and use a namedtuple?

-- A namedtuple in Python is a subclass of a regular tuple with named fields. It allows you to create simple, lightweight data structures with named attributes, making your code more readable and self-documenting.

# you need to import the namedtuple factory function from the collections module:

from collections import namedtuple

Person=namedtuple("Person",["name","age"])

alice=Person(name="Alice",age=30)

print(alice.name)
print(alice.age)

# named tupples are immutable, but we can replace the values using the '_replace()' method

alice=alice._replace(age=31)
print(alice) #Output: Person(name="Alice",age=31)

------------------------------------------------
# Variables and DataStructures:

1. Variable Declarion

    number=42
    name= "Dilip"

    # Rules
    -- Varible names can contain letters, numbers and underscores
    -- variable names are case sensitive.

2. Data Types and Dynamic Typing:

-- Python uses the dynamic typing, i.e we dont need to explicitly specify a varible's data type. 
-- It's determined at runtime.

    eg.
    x = 5       # x is integer
    x = "Hello" # x is string

    print(x) # hello will be printed

-------------------------------------

# Data structures:

1. Lists / Array in Js:

-- ordered collection of any data type.

    my_List=[1,2,3,4,5]

    print(my_List)  #Output [1, 2, 3, 4, 5]

2. Tuples:

-- Similar to the list,but its immutable("cannot change once created").

    eg. my_tuple=(1,3,4,"name");

        print(my_tuple) # Output (1, 3, 4, 'name')

3. Dictionaries/ object in Js:

-- store key-value pairs.

    eg. 
    person={
        "name":"Dilip",
        "age":26,
        "address":{
            "village":"Nimgaon",
            "zip":422103
        }
    }

    print(person) 
    # Output {'name': 'Dilip', 'age': 26, 'address': {'village': 'Nimgaon', 'zip': 422103}}


4. Access and modify:

        print(my_List[0])
        list=[0,1,2,3,4,5]

        list[2]=4
        print(list) #[0,1,4,3,4]

        print(my_tuple[2])
        person["age"]=27
        print(person)

        # Output 1
        #4
        #{'name': 'Dilip', 'age': 27, 'address': {'village': 'Nimgaon', 'zip': 422103}}

        my_List.append(6)
        print(my_List) #[1, 2, 3, 4, 5, 6]

        my_List.remove(5)
        print(my_List) #[1, 2, 3, 4, 6]

        my_List.remove(my_List[3]) #[1, 2, 3, 5]

        my_List.sort() #[1,2,3,4,5]

------------------------------------------------------

# Controll Flow

* Conditional Statement

        x=4
        if x>5:
            print("X is greater than 5")
        elif x==5:
            print("X is equal to 5")
        else:
            print("X is less than 5")

* Loops:

(1) For loop:

    numbers=[1,2,3,4,5]

    for num in numbers:
        print(num)

    # 1
    # 2
    # 3
    # 4
    # 5

(2) while loop:

        count=0
        while count<5:
            print(count)
            count+=1
        # 0
        # 1
        # 2
        # 3
        # 4

* Break and continue(controll statement)

        sum=0
        for i in range(10):
            if i%2==0:
                sum+=i
            elif i==5:
                continue
            elif i==7:
                break
        print(sum) # Output 12

----------------------------------

# Defining functions:

1. Defining function:
def greet(name):
    print("Hello, "+ name)

greet('Dilip') # Hello, Dilip



2. Function parameters and return value:

def add(a,b):
    return a+b

print(add(3,4)) # 7



3. Default parameters:

def greet(name,greetings="Hello"):
    print(greetings + ", " +name)

greet("Dilip") # Hello, Dilip

----------------------------------------

* String Functions:

1. lower():
w="Hello, World"
print(w.lower()) # hello, world

2. upper():
print(w.upper()) # HELLO, WORLD

string="dilip barku sanap"
3. title():
print(string.title()) # Dilip Barku Sanap

4. capitalize():
print(string.capitalize()) #Dilip barku sanap

5. string()
string="dilip barku sanap"
print(string.find('d')) # 0 find first the index of
print(string.find('bar')) # 6

print(string.find('bar',4)) # 6 # find from 4th index forword

6. index()
print(string.index('d')) # 0

7. isalpha()
print(string.isalpha()) #False/True

print(string.isdigit()) #True/False

9.isalnum()
print(string.isalnum()) # True/False




---------------------------------------

# Modules:

1. Importing Modules:

import math

result=math.sqrt(16)

print(result) # 4.0

2. Custom modules: create and import

# customModule.py

def greet(name):
    print("Hello, "+ name)

# app.py
import customModule

customModule.greet("Dilip") # Output Hello, Dilip

3. Module Alias

import math as m

result=m.sqrt(9)
print(result) # 3

----------------------------------------------

* Discuss the purpose of generators in Python.

Purpose of Generators in Python:

Generators are used to "create and work with sequences of data, particularly for large or infinite data sets".
They are memory-efficient because they generate data on the fly, one item at a time, rather than storing everything in memory.
"Generators are created using functions with the yield keyword, allowing you to pause and resume their execution, making them suitable for tasks like reading large files, streaming data, or generating numbers on the fly."
They are ideal for situations where you don't need to access all the data at once, improving performance and reducing memory usage.
Generators are used to simplify and optimize code when dealing with data that can be generated lazily rather than being stored in memory upfront.
In summary, generators in Python are a way to efficiently work with data sequences, especially when dealing with large or infinite data sets, by generating and processing data one item at a time, conserving memory and improving performance.

    Example:
        def number_generator():
        for num in range(1, 6):
            yield num

    # Create a generator object
    gen = number_generator()

    # Use a loop to iterate through the generator
    for num in gen:
        print(num)

---------------------------------------------

* Explain the concept of a list comprehension.

-- "A list comprehension is a concise and expressive way to create lists in Python". 
-- It allows you to generate a new list by applying an expression to each item in an existing iterable (e.g., a list, tuple, or string) or another iterable-generating construct (e.g., a range).
-- A list comprehension consists of square brackets [], containing an expression, followed by a for clause and zero or more if clauses.

    [expression for item in iterable if condition]

    Example:

    squares = [x**2 for x in range(1, 6)]

    numbers = [1, 2, 3, 4, 5, 6]
    even_numbers = [x for x in numbers if x % 2 == 0]
    
    Create a list of uppercase versions of strings in another list:
    words = ["apple", "banana", "cherry"]
    uppercase_words = [word.upper() for word in words]

    Generate a list of pairs where the sum of elements is even:
    even_sum_pairs = [(x, y) for x in range(1, 4) for y in range(1, 4) if (x + y) % 2 == 0]


-------------------------------------------------

* How do you slice a list or string in Python?

In Python, you can slice a list, tuple, or string to extract a portion of the elements or characters. 
-- Slicing is done using square brackets with the format "start:stop:step", where:

"start" is the index of the first element you want to include.
"stop" is the index of the first element you want to exclude.
"step" (optional) defines the increment between elements.

list=[0,1,2,3,4,5]

# Get elements from index 1 (inclusive) to index 4 (exclusive)
sublist=list[1:3] #OutPut: [1, 2]

# Get elements from index 2 to the end
tail = list[2:]  # Result: [2, 3, 4, 5]

# Get elements up to index 3 (exclusive)
head = list[:3]  # Result: [0, 1, 2]

# Get every second element
every_second = list[::2]  # Result: [0, 2, 4]

# Reverse the list
reversed_list = list[::-1]  # Result: [5, 4, 3, 2, 1, 0]


---------------------------------------------

* Explain the Global Interpreter Lock (GIL) in Python:

Global Interpreter Lock (GIL) in Python:

The GIL is specific to the CPython interpreter, "which is the most commonly used implementation of Python".
It ensures that "only one thread executes Python bytecode at a time," essentially making multi-threaded Python programs less efficient when it comes to utilizing multiple CPU cores for CPU-bound tasks.
The GIL can be a limiting factor for multi-threaded Python programs, particularly those that involve significant CPU processing.

-----------------------------------------
* What is the difference between Python 2 and Python 3? How do you write code that is compatible with both versions?

Print Statement:

Python 2: print "Hello, World"
Python 3: print("Hello, World")
Division:

Python 2: Division of integers may truncate: 5 / 2 equals 2.
Python 3: True division: 5 / 2 equals 2.5.
Unicode Strings:

Python 2: Strings are ASCII by default. Unicode strings require u prefix.
Python 3: Strings are Unicode by default.
xrange():

Python 2: xrange() is more memory-efficient for iterating over ranges.
Python 3: range() serves the purpose of xrange() in Python 2.
Exceptions:

Python 2: Exception handling uses as keyword: except Exception as e:.
Python 3: Exception handling uses as keyword similarly: except Exception as e:.
Iterators:

Python 2: Use .iteritems() and .itervalues() for dictionary iterations.
Python 3: Use .items() and .values() for dictionary iterations.
print Function:

Python 2: print statement without parentheses.
Python 3: print() function with parentheses.

------------------------------------------------

* What are Python decorators, and how are they used?

-- Python decorators are a p"owerful and flexible feature that allows you to modify or enhance the behavior of functions or methods without changing their source code. "
-- Decorators are often used for tasks like logging, authentication, memorization, and more. They are applied using the "@" symbol followed by the decorator name, placed above the function definition.

Here's how decorators work and how to use them:

1. Decorator Definition:
A decorator is essentially a Python function that takes another function or method as an argument and returns a new function or method with some modified behavior.

def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

2. Applying a Decorator:
To apply a decorator to a function, you use the "@" symbol followed by the decorator name above the function definition. This tells Python to pass the decorated function to the decorator function.

@my_decorator
def say_hello():
    print("Hello!")

3. Calling the Decorated Function:
When you call the decorated function, it's actually the wrapper function created by the decorator that gets executed. It can add behavior before and after the original function's execution.

say_hello()
# Output:
# Something is happening before the function is called.
# Hello!
# Something is happening after the function is called.

4. Chaining Decorators:
You can apply multiple decorators to a single function, and they will be executed in the order they are listed, from top to bottom.

@decorator1
@decorator2
def my_function():
    pass

5. Passing Arguments to Decorators:
You can create decorators that accept arguments, allowing you to customize their behavior. To achieve this, you need to define an additional outer function.

def my_decorator_with_args(arg1, arg2):
    def decorator(func):
        # Custom behavior using arg1 and arg2
        def wrapper():
            # ...
        return wrapper
    return decorator

6. Built-in Decorators:
Python provides several built-in decorators, such as 
-- @property, 
-- @staticmethod, and 
-- @classmethod, which can be used to modify the behavior of class methods and properties. 
These built-in decorators are commonly used in object-oriented programming.

"Decorators offer a clean and modular way to add functionality to your code without cluttering your functions with additional logic". 
They are widely used in Python for various purposes, including validation, timing, logging, and more, and they contribute to the readability and maintainability of your code.

-----------------------------------------------

* How is memory managed in Python? Explain reference counting and garbage collection.

Memory Management in Python:

1. Reference Counting:

Objects in memory keep track of how many references (pointers) are connected to them.
When an object's reference count reaches zero, it means the object is no longer in use, and its memory can be freed.
Pros:
Simple and fast.
Memory is released immediately when it's no longer needed.
Cons:
Inefficient for handling circular references (when objects reference each other), which can lead to memory leaks.

2. Garbage Collection:

Python uses a cyclic garbage collector to address reference counting limitations.
The garbage collector periodically scans the memory to find and clean up objects with circular references.
How it works:
It starts with "root" objects (like global variables) and traces references from there.
It marks objects that are still accessible and identifies unreachable ones for removal.
Pros:
Solves circular reference issues, preventing memory leaks.
Cons:
Introduces some overhead due to the periodic scanning process.
3. Manual Memory Management:

Python allows manual memory management through the ctypes module, which can interact with C code.
Useful when precise control over memory allocation and deallocation is needed.
In a nutshell, Python manages memory using reference counting to track object references and a cyclic garbage collector to clean up circular references, preventing memory leaks. This combination ensures efficient memory usage and automatic cleanup of unused objects in Python programs.

---------------------------------------------

* Discuss the differences between mutable and immutable data types in Python.

1. Mutable Data Types:

Mutable objects can be changed after they are created.
When you modify a mutable object, it remains the same object in memory, but its contents can change.
Examples of mutable types: "lists, dictionaries, sets."
Modifying a mutable object can have side effects, potentially affecting other parts of your code that reference the same object.
"Mutable objects are often used when you need to add, remove, or modify elements without creating a new object."

2. Immutable Data Types:

Immutable objects cannot be changed once they are created.
When you want to "change" an immutable object, you create a new object with the desired value.
Examples of immutable types: "integers, floats, strings, tuples."
"Immutable objects are generally safer in concurrent or multi-threaded environments because they can't be altered by multiple processes simultaneously".
Immutability ensures predictability and helps avoid unintended side effects when working with data.

In summary, mutable data types can be modified in place, while immutable data types cannot be changed after creation. Understanding the distinction between the two is important for proper data manipulation and avoiding unexpected behavior in your Python code.

--------------------------------------------------------

* Explain the significance of indentation in Python.

Indentation in Python:

Indentation refers to the "use of spaces or tabs at the beginning of lines to organize and structure code."

"Significance of Indentation in Python":

In Python, indentation is not just for readability; "it's a fundamental part of the language's syntax".
"Indentation is used to define code blocks, such as loops, conditionals, and function definitions".
"The level of indentation determines the scope and hierarchy of code within these blocks".
Proper indentation ensures that code is well-structured and easy to understand.
Indentation helps avoid the need for explicit braces or other delimiters, making Python code cleaner and more visually consistent.
Python enforces consistent indentation, promoting readability and reducing the likelihood of syntax errors.
In summary, in Python, indentation is essential for structuring your code, defining code blocks, and ensuring code readability. It's not just a matter of style; it's a critical part of Python's syntax

-----------------------------------------------
* Explain the concept of "first-class functions" in Python:

In Python, functions are considered "first-class citizens," which means they are treated as first-class objects within the language. This concept has several implications and characteristics:

Functions as Objects:

In Python, functions are first-class objects, just like integers, strings, or any other data type.
This means you can assign functions to variables, pass them as arguments to other functions, and return them from other functions.
Assignment to Variables:

You can assign a function to a variable, making the variable a reference to the function.
For example: my_function = some_other_function.
Passing as Arguments:

You can pass functions as arguments to other functions.
This is commonly used in functional programming paradigms or for creating higher-order functions.
Returning from Functions:

Functions can be returned as values from other functions.
This is useful for creating decorators or for returning functions that behave differently based on conditions.
Storing in Data Structures:

You can store functions in data structures like lists, dictionaries, or sets.
For example: function_list = [func1, func2, func3].
Dynamic Function Creation:

You can dynamically create and define functions at runtime.
This is often seen in metaprogramming or when functions are generated based on user input or configuration.
Higher-Order Functions:

A higher-order function is a function that either takes one or more functions as arguments or returns a function as a result.
Python supports higher-order functions due to its first-class function capabilities.
Here's a simple example to illustrate the concept:


# Function as a variable
def greet(name):
    return "Hello, " + name

hello = greet
print(hello("Alice"))  # Output: "Hello, Alice"

# Function as an argument
def apply(func, x):
    return func(x)

result = apply(greet, "Bob")
print(result)  # Output: "Hello, Bob"
In summary, "first-class functions" in Python mean that functions are treated like any other objects, allowing you to manipulate, pass, and use them in a flexible and expressive manner. This feature is a fundamental part of Python's support for functional programming and dynamic behavior.

---------------------------------------
* How do you pass multiple arguments to a Python function?

def add(a, b):
    return a + b

result = add(2, 3)  # Here, 2 is assigned to `a` and 3 is assigned to `b`.


def greet(name, message):
    return f"Hello, {name}! {message}"

result = greet(message="How are you?", name="Alice")

def greet(name, message="Good day!"):
    return f"Hello, {name}! {message}"

result = greet("Bob")  # Here, the `message` parameter takes the default value.

def print_args(*args, **kwargs):
    print("Positional Arguments:", args)
    print("Keyword Arguments:", kwargs)

print_args(1, "apple", name="Alice", age=30)

---------------------------------------------
* What is a lambda function, and when would you use one?

-- A lambda function in Python is a small, anonymous, and inline function that is defined using the lambda keyword.
--  Lambda functions are also known as "anonymous functions" because they don't have a formal name like regular functions defined using the def keyword.

    Example:
    "Syntax"
        lambda arguments: expression

        add = lambda x, y: x + y
        result = add(2, 3)  # Result: 5

------------------------------------------
* What is the purpose of the __init__.py file in a directory?
-- In Python, the __init__.py file serves a specific purpose: "it makes a directory a Python package"
-- The __init__.py file is executed when the package is imported, allowing you to perform package-level setup, initialization, or define package-level variables and functions.

my_package/
    __init__.py
    module1.py
    module2.py

    import my_package.module1
    import my_package.module2


