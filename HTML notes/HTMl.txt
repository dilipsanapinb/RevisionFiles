# Diffrence beween the DOM and BOM
-- DOM and BOM are the two distinct concept in web development
-- they play essential role in how web pages are created and interact with web browser

(1) Document Oject Model(DOM):
-- its programing interface for web document.
-- it "represent the structure of a web page as a hierarchical tree objects", "where each object corresponds to a part of the page content".
-- This allows developers to "interact with and manipulate the content and structure of a web page dynamically" using the programing languages like JavaScript.

**Key points:
-- "Tree Structure": DOM represents the HTML document as tree structure, where each HTML element, attribute, and node is represented as a node in a tree.

-- "Manupulation": using the JavaScript we can modify the DOM elements and treir attributes. It enable the dymamic content update, event handling, and user inteface interactions.
-- "Cross Platform Compatibility": - DOM is fundamental for the client side web developement.
-- "Document Interaction": DOM provides methods for loading, parsing, and interacting with documents. It allows developers to create, delete, and modify elements, attributes and content within web page.

Example: 
        var element=document.getElementByID("MyElement");
        element.textContent="New content"


(2) Browser Object Model(BOM):

-- it represent the web browser itself as object.
-- It provides an interface for interacting with various browser related features and properties like browser window, history, location and more.
-- DOM focuces on the "structure and content" of web page, the "BOM deals with browser- specific functionality."

**Key Points:
(1) "Window Object": Top level object in BOM is 'window'. It provides the access to properties like `window.location`,`window.history` and methods like `window.open()` for opening new browser windows or tabs.
eg. window.open('https://www.example.com');

(2) "Navigation": it allows developers to manipulate the browsers navigation, like redirecting the different URL's, navigate forword and backword and managing the browsers history.
(3) "Alerts and Dialogs": BOM provides methods for desplaying the alerts, confirmation, and prompts to interact with users.
(4) "Timers": BOM includes features for setting timers and intervals, allowing developers to schedule code execution.
(5) "Cookies": BOM enables the mng the cookies- like small piece of data stored by web browsers.


## How do you add CSS and HTML webpage?
    
      <!DOCTYPE html>
      <html>
      <head>
          <title>Your Page Title</title>
          <!-- Add CSS link or styles here -->
           <link rel="stylesheet" type="text/css" href="styles.css">
           // <style></style>
           // we can add inline style
      </head>
      <body>
          <!-- Add HTML content here -->
      </body>
      </html>
-----------------------------------------------

## What is HTML?
  -- HTML stands for 'Hyper Text Markup Language'
  -- HTML is the standard markup language for creating Web pages
  -- HTML describes the structure of a Web page
  -- HTML consists of a series of elements
  -- HTML elements tell the browser how to display the content
  -- HTML elements label pieces of content such as "this is a heading", "this is a paragraph", "this is a link", etc.

  <!DOCTYPE html> // it declares that this document is a HTML5(launched in 2008) document. And helps browsers to display web pages correctly.
  
  //It must only appear once, at the top of the page (before any HTML tags).

  // <!DOCTYPE> declares its not a case sensitive

<html>  // root element of html page. It defines the whole HTML document.

    <head>  // element contains "meta information" about the HTML page.

        <title>Practice</title>  // title of browser page which shown on browsers bar.

    </head>
    <body> // "container for all visible content"-h,p,img,a,t,li,etc
    <h1>hii</h1>    
    </body>
</html>

-------------------------------------

## Purpose of the HTML
-- its backbone of the World Wide Web
-- structure and format the content on web pages
-- Purposes-
          (1)"Structuring the content:" using the elements like html,head,title,body,header,nav,main,footer
          (2) "Text formating:" h1,h2,p,em,strong,ul,ol,blockquates
          (3)"Hypelinks"
          (4)Images and multimedia:img,audio,video
          (5) "Forms and input": form, input,textarea,select
          (6) "Metadata": meta,link, script
          (7) "accessable"
          (8)Search engine optimisation: Properly structured HTML can improve a website's visibility in search engine results.
          (9) Cross browser compatibility

-----------------------------------------

## Describe the difference between HTML and HTML5.

HTML5, the fifth revision of the Hypertext Markup Language (HTML), brought several significant enhancements and new features compared to its predecessor, HTML 4.01. Here are some of the key differences between HTML and HTML5:

(1) "DOCTYPE Declaration":

'HTML': In HTML 4.01, you typically used a transitional or strict Document Type Definition (DTD) declaration to define the version of HTML being used, which often looked like <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">.

'HTML5': In HTML5, the DOCTYPE declaration is simplified to <!DOCTYPE html>, making it easier to declare the document's HTML5 version.

(2) 'New Semantic Elements':

'HTML': HTML 4.01 had limited semantic elements, and most of the document structure relied on <div> and <span> elements with class attributes for styling and scripting.

'HTML5': HTML5 introduced new semantic elements like <header>, <nav>, <section>, <article>, <aside>, <footer>, and <main>. These elements "provide a more meaningful way to structure web content, improve accessibility, and enhance search engine optimization".

(3) "Audio and Video Support":

HTML: HTML 4.01 had "no built-in support" for audio and video content. Embedding multimedia typically relied on third-party plugins like Adobe Flash.
HTML5: HTML5 introduced the <audio> and <video> elements, which allow you to embed audio and video directly into web pages without the need for plugins. This greatly improved compatibility and reduced reliance on external technologies.

(4) "Canvas Element":

HTML: HTML 4.01 lacked native support for creating graphics and animations within the browser.

HTML5: HTML5 introduced the <canvas> element and the "associated JavaScript API, which enables dynamic rendering of 2D and 3D graphics directly in the browser".

(5) "Geolocation API":

HTML: HTML 4.01 did not provide a standardized way to access a user's geographical location.

HTML5: HTML5 introduced the Geolocation API, which allows web applications to request and utilize a user's location data with their permission.

(6) "Offline Web Applications":

HTML: HTML 4.01 had "no built-in support for creating offline web applications".

HTML5: HTML5 introduced features like the "Application Cache and Web Storage", enabling web apps to work offline and store data on the user's device.

(7) "Improved Form Elements":

HTML: HTML 4.01 had limited form input types and attributes.

HTML5: HTML5 introduced new input types (e.g., email, url, date, number) and attributes (e.g., required, placeholder) that enhance form usability and validation.

(7) "Better Accessibility":

HTML: HTML 4.01 had limited accessibility features.

HTML5: HTML5 includes native support for accessibility features, making it easier to create web content that is more inclusive and usable by individuals with disabilities.

(8) "Backward Compatibility":

HTML: HTML 4.01 documents required careful adherence to strict rules for proper rendering across different browsers.

HTML5: HTML5 was designed with better backward compatibility in mind, allowing older HTML documents to work in modern browsers without major issues.

HTML5 represented a significant step forward in web development, offering improved semantics, multimedia support, and features for creating rich web applications. It has become the standard for modern web development, supplanting the older HTML versions like HTML 4.01.

(9) "Drag and Drop": HTML5 introduced the Drag and Drop API, allowing developers to implement drag-and-drop functionality without resorting to JavaScript libraries or plugins. This feature makes it easier "to create interactive and intuitive interfaces".

(10) Web Workers: "HTML5 introduced the Web Workers API, which allows the execution of scripts in the background, separate from the main browser thread". Web Workers enable multitasking and better performance by offloading computationally intensive tasks to separate threads.

(11) "Web Storage": HTML5 introduced Web Storage, which provides a simple key-value storage mechanism in the user's browser. It allows websites to store data locally, improving performance and providing a way to persist user preferences and application state.

---------------------------------------

## What is the purpose of the <table> element in HTML?

-- Its used to create structured data tables within a web page.
-- Tables are a fundamental component of web design and are used to display data in rows and columns.

-- for the tabular data presentation,
    <th> table head 
    <tr> table row
    <td> table tada (define each cell or data within row)

    eg.
      <table>
        <tr>
            <th>Name</th>
            <th>Email</th>
        </tr>
        <tr>
            <td>Dilip Sanap</td>
            <td>dilipsanap@gmail.com</td>
        </tr>
      </table>


"Captions": You can use the optional <caption> element to provide a 'title' or 'description' for the table, which is typically displayed above or below the table.

    eg. <table>
            <caption>Sample Table<caption>
        </table>
    

"Cell margin":

        We can use tha 'colspan' and 'rowspan' attributes with <td> or <th> elements to merge cells horizontally or vertically

        eg.
            <table>
                <tr>
                  <th>Header 1</th>
                  <th>Header 2</th>
                </tr>
                <tr>
                  <td colspan="2">Merged Cell</td>
                </tr>
            </table>
          

"Data Sorting and Interactivity":
      JavaScript and libraries like jQuery and DataTables can be used to add interactivity to tables, such as sorting, filtering, and pagination.

--------------------------------------

## What is the difference between <bold>,  <strong> and <em> tags?


The <b>, <strong>, and <em> tags are used in HTML to "apply various levels of emphasis or importance to text", but they have different meanings and purposes:

(1) <b> (Bold):

The <b> element is "used to simply make text bold without conveying any specific semantic meaning".
It is typically used for presentational purposes, such as making text stand out visually. It does not imply any inherent importance or emphasis on the text.

Example:

This is <b>bold</b> text.


(2) <strong> (Strong Emphasis):

The <strong> element is "used to indicate strong importance or emphasis on text content".
It "carries a semantic meaning of importance", indicating that the text should be emphasized for its inherent significance. "It is often rendered as bold text by default in browsers, but its primary purpose is to convey meaning, not just style".

Example:

This is <strong>strongly emphasized</strong> text.


(3) <em> (Emphasis):

The <em> element is "used to emphasize text, typically by italicizing it".
Like <strong>, <em> carries semantic meaning, but it signifies a different kind of emphasis – one that is more subtle than strong importance. It often indicates that the text should be read with a slight change in tone or stress, rather than just for visual emphasis.

Example:

This is <em>emphasized</em> text.

----------------------------------

## Explain the use of the <iframe> element.

The <iframe> (inline frame) element is used to embed another HTML document or web page within the current web page. It allows you to display external content, such as "web pages, videos, maps or other document" as part of your web page's content.

The <iframe> element creates a separate frame or window within the current page where the embedded content is dispayed.

eg.

    <iframe 
      src="URL of embeded page (attribute specifies the URL of the external content)" 
      width=""
      height="" 
      frameborder="0" 
      scrolling="auto">
    </iframe>


"Use cases":

Common use cases for the <iframe> element include:

(1) Embedding videos from platforms like YouTube or Vimeo.
(2) Displaying maps using services like Google Maps or Mapbox.
(3) Embedding social media content like tweets or Facebook posts.
(4) Integrating external web applications or widgets.
(4) Showing content from a different domain while maintaining separation between your site and the embedded content (though there might be security restrictions and cross-origin considerations in such cases).
----------------------------------

## What is an HTML entity, and give an example.

An HTML entity is a "sequence of characters that represents a special or reserved character in HTML", allowing you to display characters that have special meanings in HTML or that are not easily typable on a keyboard. HTML entities are used to ensure proper rendering and interpretation of these characters in web documents.

HTML entities are composed of an ampersand (&) followed by a specific code or name and closed with a semicolon (;). There are two main types of HTML entities:

Character Entities: These are typically used to display characters that have a special meaning in HTML, such as < and > which are used to define HTML tags. Here are some examples:

&lt; represents the less-than symbol <.
&gt; represents the greater-than symbol >.
&amp; represents the ampersand symbol &.
For example, to display the text "2 < 3," you would write it as:

2 &lt; 3

Numeric Entities: These are used to represent characters based on their Unicode code points. Numeric entities are especially useful when you need to display characters that are not readily available on your keyboard. Here's an example using the numeric entity for the copyright symbol (©):

&#169; represents the copyright symbol ©.

For example:

The copyright symbol is &#169;.

HTML entities are essential for ensuring that web pages render correctly and consistently across different browsers and platforms. They are particularly useful when you need to include characters that might otherwise be interpreted as part of HTML markup or when working with characters from different languages or special symbols.

--------------------------------------

##  Describe the difference between HTML and XHTML.

HTML (Hypertext Markup Language) and XHTML (Extensible Hypertext Markup Language) are both markup languages used for creating web pages, but they have some key differences in terms of syntax, rules, and handling of content. Here's a comparison of HTML and XHTML:

(1) "Syntax":

(a)'HTML': HTML has a more 'forgiving' syntax. It "allows certain mistakes in code", such as unclosed tags or attribute values without quotes, to be ignored by web browsers. For example, in HTML, you can write <img src="image.jpg"> without quotes around the attribute value.

(b)'XHTML': XHTML has a "stricter syntax". It enforces well-formedness rules borrowed from XML, which means that "all tags must be properly nested, closed, and attribute values must be enclosed in quotes". For example, in XHTML, you must write <img src="image.jpg" /> with a closing slash in the self-closing tag.

(2) "Document Structure":

(a) 'HTML': In HTML, there is "more flexibility in structuring documents". It allows you to omit certain elements, like the <html>, <head>, or <body> tags, and browsers will still render the content.

(b) 'XHTML': XHTML requires a "more structured document". It mandates the presence of essential elements like <html>, <head>, and <body>, and missing any of these elements can lead to parsing errors.

(3) "Lowercase Element and Attribute Names":

(a) 'HTML': HTML "allows element and attribute names to be written in uppercase or mixed case", and it doesn't distinguish between them. For example, <IMG SRC="image.jpg"> is valid HTML.

(b) 'XHTML': "XHTML mandates lowercase element" and attribute names. All element and attribute names must be in lowercase for the document to be considered valid.

(4) "Quotation Marks":

'HTML': HTML allows the use of "both single and double quotation marks" for attribute values. For example, <a href='https://www.example.com'> is valid HTML.

'XHTML': XHTML requires attribute values to be "enclosed in double quotation" marks. For example, <a href="https://www.example.com"> is the correct way to write it in XHTML.

(5) "Self-Closing Tags":

HTML: In HTML, self-closing tags like <img>, <br>, and <input> are optional, and you can use them without the closing slash (e.g., <img> or <img /> both work).

XHTML: XHTML requires all self-closing tags to include the closing slash (e.g., <img />, <br />, <input />).

(6) "Error Handling":

'HTML': HTML is more 'forgiving' of errors. Browsers often attempt to render the page even if there are minor markup errors.

'XHTML': XHTML is "less forgiving of errors". Even small syntax errors can result in the browser refusing to render the page. This strictness can help identify and fix issues early in development but can also make XHTML documents more challenging to work with.

(7) "MIME Type:"

HTML: HTML documents are typically served with the MIME type text/html.

XHTML: XHTML documents should be served with the MIME type application/xhtml+xml for strict adherence to XML rules. However, in practice, many web servers serve XHTML documents as text/html to ensure compatibility with older browsers.

In summary, XHTML is an extension of HTML that enforces stricter rules and well-formedness, borrowing from XML's syntax. While XHTML was initially touted as the future of web development, HTML5 has become the dominant standard due to its flexibility, backward compatibility, and the fact that browsers have become more forgiving of HTML's quirks. Today, web developers primarily use HTML5 for creating web pages.

-----------------------------------------
## What are different types of storages in HTML5?
    
        HTML5 introduced two types of storage mechanisms:

        (1) Local Storage (localStorage): Local storage provides "a way to store key-value pairs in the user's web browser with no expiration date". The data stored in local storage remains available even if the browser is closed and reopened. It is a persistent storage solution that can hold a larger amount of data (typically up to 5MB or more) compared to cookies. Local storage is accessed through the localStorage object in JavaScript.
        Example usage:

        
                  // Storing data in local storage
                  localStorage.setItem('key', 'value');

                  // Retrieving data from local storage
                  var value = localStorage.getItem('key');

                  // Removing data from local storage
                  localStorage.removeItem('key');


        (2) Session Storage (sessionStorage): Session storage is similar to local storage but has a different lifespan. "It allows storing data that is specific to a particular browsing session." The data stored in session storage is available only as long as the browser tab or window remains open. Once the tab or window is closed, the session storage data is cleared. Like local storage, session storage also uses key-value pairs and can be "accessed through the sessionStorage object in JavaScript".
        
        Example usage:

        // Storing data in session storage
        sessionStorage.setItem('key', 'value');

        // Retrieving data from session storage
        var value = sessionStorage.getItem('key');

        // Removing data from session storage
        sessionStorage.removeItem('key');

Both local storage and session storage provide a convenient way to store data on the client-side, reducing the need for server-side storage or frequent server requests. They are commonly used for caching data, persisting user preferences, or storing application state. However, it's important to note that the data stored in these mechanisms is specific to the user's browser and device and is not accessible across different browsers or devices.

------------------------------------------

## What is the basic structure of the HTML tag?

-- it consist of the two parts: an opening tag and closing tag.

element name=> attribute => closing tag

---------------------------------------

## What is an HTML Element?

=> In HTML element is that can be used to define the structure and content of web page.
An HTML element is defined by a start tag, some content, and an end tag:

   eg. html, head, title, body, h1-h6, p, a, img, ul, li, ol, table,form,input, button

   => The <br> tag defines a line break, and is an empty element without a closing tag:

   => HTML tags are not case sensitive.

   => <hr> (horizontal rule) tag defines a thematic break in an HTML page, and is most often displayed as a horizontal rule.

   => The <br> tag is an empty tag, which means that it has no end tag.
     -> it defines a line break.
     -> we can use it to make new line without starting new paragraph.

  => <pre> element:
    -> pre defines the preformated text.
    -> text inside a <pre> element is displayed in fixed-width font usually in Courier, and it preserves both spaces and line breaks.


----------------------------------------

## Explain the use of the <meta> tag.

-- Its used to provide metadata or additional information about a web page.

-- Meatadata is data about data and it helps browsers and search engines understand and display wabe pages correctly.

-- <meta> tag does not render any visible content on web-page itself but plays a crucial role in optimizing how page is displayed and indexed.

-- Use cases:
(1)"Character Encoding": to specify the character of the document. It ensure that the browser interprets the text in the correct character set.
        eg.
            <meta chatset="UTF-8">

(2) "Viewport Configuration": For responsive design we can use the <meta> tag to set the viewport properties. This helps in controlling how a web page is displayed on different devices and screen size.

eg. 
  <meta name='viewport' content="width=device-width, initial-scale=1.0">

(3) "Page Title and Description":
  Search engines often use metadata to display search results. You can set the title and description that appear in search endgine results using <meta> tags:
  eg.
      <meta name="title" content="Page Title">
      <meta name="description" content="This is a description of the page content.">

(4)"Open Graph and Twitter Cards": These are meta tags used for sharing content on social media platforms. They allow you to control how your content appears when shared on platforms like Facebook and Twitter.

------------------------

## HTML headings:
-- h1-h6

--------------------------
##What is the purpose of the <ol> and <ul> tags?

(1)<ul>:
-- To create the list of items that dont have a specific order or sequence.
-- Items dispayed with bullet points or other markers

eg.
    <ul>
          <li>Item1</li>
          <li>Item2</li>
    </ul>

(2)<ol>:
-- To list of items with specific ordering
-- displayed with numbers or letters

eg. 
    <ol>
      <li>First item</li>
      <li>Second item</li>
      <li>Third item</li>
    </ol>

--------------------------------------

## Differentiate between <div> and <span> elements.

-- div and span elements in HTML are both used for "grouping and styling content", 
-- Both have default dispaly behavior.

** Differences
(1) Purpose:
--'div':
        Division is "block level container" used to group and structure content within a web page.
        used to create block-level sections of content, such as sections, headers, footers, or entire lauout structures.
        Div element is often used in conjuction with CSS for layout and styling purpose.

--'span':
        Its "inline-level" container.
        used to apply styling or markup to small, inline portions of text or content.
        used for apply CSS, Js actions, or sematic markup to specific portions of a larger block of text or content.

(2) "Display Behavior":
--'div':
        'Block level' container: they start on new line and expand to fill the width of their parent container.
        Multiple <div> elements will stack vertically create distinct blocks of content.

--<span>:
        'inline': occupy as much horizontal space as necessary to contain their content.
        multiple <span> elements can exist in single line.


(3) "Use Cases":
--<div>:
        when we need to create distinct, block level sections of content, such as diciding your page into header, main content, sidebar, and footer sections.
--<span>:
        when we want apply style or markup to specific portions of text within a larger block of content.
        eg.
          <p>This is <span class="highlight">highlighed </span></p>
        
        
-----------------------------------

## What does the HTML <br> tag do?

The <br> tag in HTML stands for "line break," and it is a self-closing tag used to create a line break or a new line within a block of text or content. When you use the <br> tag, it forces any content that follows it to appear on the next line, effectively creating a line break in the document

## CSS RGB Colors

-- RGB value is the combination of Red, Green, and Blue colors.
-- An RGB color value is specified with : rgb(red, green, blue). The range of these three colors is defined from 0 to 255 and it defines the intensity of the color. The colors can be changed by changing these values.

---------------------------------------

## How can you make an HTML elements invisible but still accessible to screen readers?

-- by using the CSS to hide it visually while ensuring it remains in the document flow for scrren readers to interpret.

-- it is refered as 'off-screen' or 'visually hidden' text. It's a valuable technique when you want to provide additional informtion or context for screen reader without cluttering the visual layout for sighted users.

To make element doesnt take space in the visible layout, we can use 'position:absolute' with negative values for 'left' or 'top' or using 'clip-path' to move element outside the viewport.

eg. move element 9999 pixels to the left(off-screen),

.visually-hidden{
  position:absolute;
  left:-9999px;
}

.visually-hidden{
  clip-path:polygon(0 0, 0 0, 0 0 
  , 0 0);
}

-----------------------------------------

## What is HTML entity and give an example?

-- HTML entity is the "sequence of the characters that represents a special or reserved character in HTML", 
-- It allow to display characters that have special meaning in HTML that are not easily typable on keyboard.

-- HTML entities are composed of an 'ampersand'('&') followed by specific code or name and closed with a semicolon (';').

-- Two types of the HTML entities:

(1)"Character Entities:"
-- dispaly a character that have a special meaning.
-- '&lt': '<' symbol
-- '$gt': '>' symbol
-- '&amp': '&' symbol

    eg. 2 &lt; 3

(2) "Numeric Entities":

They are used to represent charaters based on their unicode code points. They are used to display characters that arenot readily available on your keyboard.

eg.
    Tha copyright symbol is &#169;.


--------------------------------------------------

## How do you create a dropdown list in an HTML form?

we can use tha select and option elements

## Dropdown using the hover.

<div class="dropdown">
    <button class="dropbtn">More</button>
    <div class="dropdown-content">
      <a href='#'>Item 1</a>
      <a href='#'>Item 2</a>
      <a href='#'>Item 3</a>
    </div>
</div>

# css
.dropdown{
    position:realtive;
    display:inline-block;
}

.dropbtn{
  background-color:#3498db;
  color:white;
  padding: 10px;
  border: none
}

.dropdown-content{
  dispaly: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 
}

.dropdown-content a{
  padding: 12px 12px;
  text-decoration:none;
  display: block;
  color: #333;
}

.dropdown-content a:hover{
  background-color: #ddd;
}


--------------------------------------

## What is the purpose of the <aside> element in HTML5?

-- The <aside> element in HTML is used to "define content that is tangentially relate to the content around it", but can be considered separate or self-contained. 

-- It represents content that is not the primary focus of the page but provide additional information or context.

-- <aside> element is to mark content as 'aside' from the main content, used for sidebars, pull quates, advertisements, or other types of content that are related but not critical to the main content.

<article>
    <h1> Main Article Title </h1>
    <p> Main article</p>
<article>

<aside>
    <h2> Related Links</h2>
    <ul>
      <li><a href="#">L 1 </a></li>
      <li><a href="#">L 2 </a></li>
    </ul>
</aside>

--------------------------------------

## How can you add a video to an HTML document using HTML5?

<video controls autoplay width="640" height="360" poster="video-poster.jpg" preload="auto" loop muted>
    <source src='video.mp4' type='video.mp4'>
    <source src='video.webm' type=video/webm>
</video>


---------------------------------------

## What is the difference between the <header> and <footer> elements in HTML5?

Here are the key differences between the <header> and <footer> elements in HTML5:

<header> Element:

Purpose: The <header> element is used to represent "introductory or top-level content of a section or a page". It typically contains information like the "page's title, logo, navigation menu", and other elements that provide context or identify the content.

Placement: The <header> element is usually placed at the top of a section or page, and there can be multiple <header> elements within a page, each associated with different sections.

Examples:

In an article, the <header> can contain the article title, author's name, and publication date.
In a webpage, the site logo, navigation menu, and contact information can be enclosed in a <header>.

<header>
  <h1>My Website</h1>
  <nav>
    <ul>
      <li><a href="/">Home</a></li>
      <li><a href="/about">About</a></li>
      <li><a href="/contact">Contact</a></li>
    </ul>
  </nav>
</header>



<footer> Element:

Purpose: The <footer> element is used to "represent the footer or closing section of a page or a section". It typically contains "information like copyright notices, contact details, links to related documents", or any content that should appear at the end of the page.

Placement: The <footer> element is usually placed at the bottom of a section or page, and there can be multiple <footer> elements within a page, each associated with different sections or content.

Examples:

In an article, the <footer> can contain the publication date, author's bio, and related article links.
In a webpage, the <footer> can have copyright information, contact details, and links to the privacy policy and terms of service.


<footer>
  <p>&copy; 2023 My Website. All rights reserved.</p>
  <p>Contact: info@example.com</p>
</footer>

In summary, the <header> element is typically used for top-level introductory content, while the <footer> element is used for closing content or additional information at the bottom of a section or page. 


------------------------------------------------------------------

## What is the purpose of the HTML <abbr> element?

In HTML <abbr> element is used to define an abbrevation or acronym within a web page. 

-- To provide additional info to user about an abbrevation or accronym by specifying its full or expanded form, "typicaly as tooltip or hover text".

-- hrlpfull in the technical terms.

eg.
    <p>HTML is a markup language used for <abbr title="Hypertext Markup Language">HTML</abbr> documets.</p>

-------------------------------------------

## How do you create a responsive design in HTML and CSS?

Creating a responsive design in HTML and CSS involves designing web pages that adapt and look good on various screen sizes and devices, including desktops, tablets, and smartphones. Here are the key steps and techniques to achieve a responsive design:

(1) 'Use Responsive Layouts':

Utilize fluid or responsive layout techniques such as percentage-based widths for containers and columns instead of fixed pixel values.
Consider using CSS frameworks like Bootstrap or Flexbox and CSS Grid for responsive grid layouts.

(2) "Media Queries":

Media queries are CSS rules that apply styles based on the screen width or other device characteristics. Use media queries to target different screen sizes.
Define breakpoints at which your design should change. Common breakpoints include mobile (small screens), tablet (medium screens), and desktop (large screens).
Example of a media query for targeting small screens (mobile):


@media (max-width: 768px) {
  /* CSS styles for small screens go here */
}


(3) "Flexible Images and Media":

Use CSS to make images and embedded media (like videos) scale proportionally with the screen size.
Set max-width: 100%; on images to prevent them from overflowing their containers.

img {
  max-width: 100%;
  height: auto;
}


(4) "Viewport Meta Tag":

Include a viewport meta tag in your HTML <head> to control how the webpage is displayed on mobile devices. This tag ensures that the page adjusts to the device's viewport width.


<meta name="viewport" content="width=device-width, initial-scale=1.0">

(5) "Responsive Typography":

Use relative units like em, rem, or percentages for font sizes to allow text to scale appropriately with the screen size.
Consider using CSS techniques like vw (viewport width) units for responsive typography.


body {
  font-size: 16px; /* Default font size */
}

@media (max-width: 768px) {
  body {
    font-size: 14px; /* Adjust font size for smaller screens */
  }
}

(6) "Mobile-First Approach":

Start designing and coding for mobile devices first, and then progressively enhance the design for larger screens using media queries.
This approach ensures a solid foundation for smaller screens and simplifies the process of adding complexity for larger screens.

Testing and Debugging:

Regularly test your responsive design on different devices and screen sizes to ensure that it looks and functions as intended.
Use browser developer tools to inspect and debug layout and CSS issues.

(7) "Images and Icons":

Optimize images for various screen resolutions and sizes.
Consider using vector icons (SVG) that can scale without losing quality.

(8) "Content Priority":

Prioritize and reorganize content for smaller screens. Focus on delivering essential content first and consider hiding or collapsing less important content.

(9) "User Experience (UX)":

Pay attention to the user experience, including touch-friendly navigation, legible text, and easily clickable elements on touch screens.
By following these principles and techniques, you can create a responsive design that adapts to various screen sizes and provides an optimal user experience across a wide range of devices.

------------------------------------------------------------
